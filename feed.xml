<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:base="en">
  <title>Move Fast; Break Nothing</title>
  <subtitle>From the wonky mind of Collin Green</subtitle>
  <link href="https://collingreen.com/feed.xml" rel="self"/>
  <link href="https://collingreen.com/"/>
  <updated>2024-03-09T20:39:47Z</updated>
  <id>https://collingreen.com/</id>
  <author>
    <name>Collin Green</name>
    <email>collin@collingreen.com</email>
  </author>
  
  <entry>
    <title>Startup Lingo</title>
    <link href="https://collingreen.com/blog/startup-lingo/"/>
    <updated>2024-03-09T20:39:47Z</updated>
    <id>https://collingreen.com/blog/startup-lingo/</id>
    <content type="html">&lt;p&gt;Like all specialized groups, folks working at tech startups, especially
engineers, tend to develop their own special jargon and references that can be
totally opaque when looking in from the outside.&lt;/p&gt;
&lt;p&gt;There are plenty of lists of actual business terms used around startups; this is
not that. Instead, this includes mostly interpersonal language that usually has
a sarcastic or negative angle to it. The list intentionally skips over standard
&#39;business speak&#39; and goes straight for the snark. I&#39;ve roughly categorized them
below by topic or by level of negativity.&lt;/p&gt;
&lt;p&gt;You might hear these phrases in any tech startup (or on an episode of Silicon
Valley) and they cover a wide area of meaning, ranging from a fun reference to a
veiled insult, depending on the phrase and the context. Interesting, many of
these are not new terms at all and have simply been taken up as part of the
normal startup lingo. Often they come with semi-interesting backstories so if
you find one you don&#39;t know the source of it is worth searching for it online.&lt;/p&gt;
&lt;hr /&gt;
&lt;h4&gt;Phrases About Business and Startup Equity&lt;/h4&gt;
&lt;p&gt;This first group of words and phrases are about business in general or about
the common startup situation where employees are compensated partially with
stock options, often in lieu of better pay. They aren&#39;t necessarily negative,
although most can still be used in a negative way and context matters.&lt;/p&gt;
&lt;h5&gt;Bootstrap&lt;/h5&gt;
&lt;p&gt;Bootstrapping means building a business without taking outside funding, which
often means you get to retain equity ownership and control but you might have to
compete against businesses that did take capital and are therefore far better
funded than you are.&lt;/p&gt;
&lt;p&gt;The phrase comes from the nonsense phrase &amp;quot;pull yourself up by your bootstraps&amp;quot;
which, despite often being used unironically, was originally a
sarcastic snipe at people blaming bad situations like poverty on the victims by
calling them lazy (this is sarcastic because it is physically impossible to pull
yourself up by your own bootstraps - you need another point of leverage).&lt;/p&gt;
&lt;h5&gt;Golden Handcuffs&lt;/h5&gt;
&lt;p&gt;Golden handcuffs refers to the idea that equity in a business can trap you
there, unable to leave, even if you might otherwise want to. Often this is
assumed to mean simply that &#39;the pay is just too good&#39;, usually because of
monthly vesting of early stock options that have low strike prices (the price
you pay for the stock) compared to the &#39;current&#39; price, making your total
compensation more valuable &lt;em&gt;on paper&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;However, there are also darker sides of golden handcuffs where it isn&#39;t just
about &#39;not continuing to make money&#39; but is instead more clearly about losing
what you&#39;ve already earned. Most startup stock grants require you to exercise
the options (ie, pay money and get real stock in return) within a short period
(often 30 to 90 days) of leaving the company or being fired. This means that if
you don&#39;t have the extra cash to actually excercise your options (especially
likely if you just got fired) then leaving or losing your job means you&#39;ll
&lt;em&gt;lose&lt;/em&gt; all those options, even though you earned them as part of your pay
package.&lt;/p&gt;
&lt;p&gt;Moveover, taxes get weird in these situations as well. In the US, when you
exercise your stock options, the difference between the price you paid and the
&#39;current market value&#39; is treated like taxable income for the alternative
minimum tax calculations (it&#39;s complicated; do some googling if you want to know
more about AMT and the &#39;bargain&#39;). If your company has been doing really well
since you started then excercising your options might land you a massive tax
bill that you have no way to pay since the stock is still illiquid and
unsellable.&lt;/p&gt;
&lt;h5&gt;Golden Parachute&lt;/h5&gt;
&lt;p&gt;In the same way golden handcuffs trap you somewhere with money, a golden
parachute is a term that has been in use since the 60s for something that
bails you out of a bad situation. This is usually reserved for founders and
executives and comes in the form of contractual guarantees such that even if you
lose your job you still get a big windfall. Depending on who is speaking, this
might be seen as a fantastic tool in the toolbox or an example of yet another
way the rich get richer and the average working stiff gets screwed, similar to
&#39;failing upward&#39;.&lt;/p&gt;
&lt;h5&gt;Rest and Vest&lt;/h5&gt;
&lt;p&gt;Resting and Vesting is a cheeky term for simply doing the minimum at your job to
not get fired while you accrue potentially valuable stock options.
Most startup stock option plans vest on a schedule such that, after an initial
period with nothing, the options are available for exercise a little at a time,
usually with a new chunk available each month. Saying someone is &#39;resting and
vesting&#39; is effectively calling them some combination of lazy and entitled since
they implication is that they aren&#39;t putting in the effort to &#39;earn&#39; the stock
they are vesting.&lt;/p&gt;
&lt;h5&gt;A Rising Tide Raises All Boats&lt;/h5&gt;
&lt;p&gt;A rising tide raises all boats is a saying used to suggest something is not a
hyper-competitive, zero-sum situation and instead can have many winners all
benefiting from each other&#39;s contributions to the space in general. This is
usually a way to describe early markets and new ideas where effort by multiple
companies can raise awareness of the market in otherwise ignorant customers,
causing everyone to grow without having to compete with each other for
particular customers or segments. This is generally the opposite of a mature,
saturated market where one business&#39; gain is almost certain at another&#39;s
expense.&lt;/p&gt;
&lt;hr /&gt;
&lt;h4&gt;Phrases About Thinking&lt;/h4&gt;
&lt;p&gt;This short section includes metaphors or allegories that describe what a
particular problem or strategy might be like and how to go after it.&lt;/p&gt;
&lt;h5&gt;Chesterton&#39;s Fence&lt;/h5&gt;
&lt;p&gt;Chesterton&#39;s fence is a parable about a naive boy  wanting to remove a fence
because he didn&#39;t see why it would be there in the first place. The wise man
replies that if the boy doesn&#39;t see why the fence was put there originally then
there is no way he could know if it is a good idea to remove it now.&lt;/p&gt;
&lt;p&gt;This comes up a lot when reading code and wanting to replace something you think
is stupid, ugly, or unnecessary.&lt;/p&gt;
&lt;h5&gt;Turtles All the Way Down&lt;/h5&gt;
&lt;p&gt;This is a complicated phrase with many potential meanings! It refers to a flawed
line of reasoning requiring infinite regression. A common anecdote is of someone
describing the world as impossible to exist on its own in space and therefore
being balanced on a giant turtle&#39;s back. When pressed for what that turtle is
standing on the answer is another turtle, and so on and so forth where it is
&#39;turtles all the way down&#39;.&lt;/p&gt;
&lt;p&gt;Sometimes this is a self deprecating phrase about neverending work (see yak
shaving) and sometimes this is an accusation of faulty reasoning.&lt;/p&gt;
&lt;hr /&gt;
&lt;h4&gt;Derogatory and Judgemental Phrases&lt;/h4&gt;
&lt;p&gt;Often jargon is used as a shorthand for insults or other personal attacks,
especially if the target might not know what it refers to. Most of the phrases
listed below attack ideas or behaviors without directly labeling a person
(but definitely imply negative things about them; usually that they are stupid)
so they are often used passive aggresively and can make it into situations where
more direct insults would be punished or reprimanded.&lt;/p&gt;
&lt;h5&gt;Nobody Ever Got Fired for...&lt;/h5&gt;
&lt;p&gt;A common phrase with many potential endings (often &#39;buying IBM&#39; or &#39;buying
microsoft&#39; but can be anything where there is a particularly dominant company or
pattern), this describes the tendency for people to pick whatever is already
popular because it is safe to go with the standard answer, even if it ends up
poorly, because if you go with something risky and it fails you might look bad
or be punished.&lt;/p&gt;
&lt;p&gt;This can simply refer to the difficulty in displacing incumbent products or can
be used to label someone&#39;s behavior as cowardly or even stupid by implying they
are making choices for the wrong reasons.&lt;/p&gt;
&lt;h5&gt;Golden Hammer&lt;/h5&gt;
&lt;p&gt;A golden hammer is a solution or tool that someone always goes to, even if
it isn&#39;t the right thing for the job.&lt;/p&gt;
&lt;p&gt;Calling something a golden hammer is saying that it is incorrectly being used
for too many things, usually implying the weilder / suggestor doesn&#39;t know more
than one solution for things and relies too heavily on the one thing they know
or that they don&#39;t see the nuance and differences between different situations.&lt;/p&gt;
&lt;p&gt;&amp;quot;Golden hammer&amp;quot; describes the hammer in the phrase &amp;quot;if the only tool you have is
a hammer then everything starts to look like a nail&amp;quot;.&lt;/p&gt;
&lt;h5&gt;The CIA Simple Sabotage Manual&lt;/h5&gt;
&lt;p&gt;The CIA &lt;a href=&quot;https://www.cia.gov/static/5c875f3ec660e092cf893f60b4a288df/SimpleSabotage.pdf&quot;&gt;really did create a
manual&lt;/a&gt; for &#39;simple sabotage&#39; with a bunch of ideas
for how to make productivity plummet and make businesses grind to a halt without
doing directly destructive actions you can get fired for. In theory this was for
sympathetic wartime citizens behind enemy lines but it gets referenced in the
modern workplace because the resulting choas looks a lot like the day to day
experience in which many of us are living. The bits about having lots of
meetings, making decisions by committee, insisting on lots of process and
review, promoting bad workers while punishing good ones, and using the wrong
tools for the job are particularly common.&lt;/p&gt;
&lt;p&gt;If someone mentions the sabotage manual it usually means they are implying
someone is causing so much harm that it looks like intentionally making things
worse.&lt;/p&gt;
&lt;h5&gt;The Dunning-Kruger Effect and Mt Stupid&lt;/h5&gt;
&lt;p&gt;The Dunning-Kruger effect is the observation that people who only know a little
about a domain often vastly overestimate their own competence because they don&#39;t
understand all the things they don&#39;t yet know, while experts often underestimate
their own competence precisely because of their understanding of the depth of
the field.&lt;/p&gt;
&lt;p&gt;Referring to Dunning-Kruger is usually implying someone is at the peak of their
undeserved confidence (sometimes called &amp;quot;mount stupid&amp;quot;) as a way to undermine
their point or to imply they are in for a rude awakening soon.&lt;/p&gt;
&lt;p&gt;Ironically this isn&#39;t a very well understood (or even reliable) concept and is
often mis-referenced by people who &lt;em&gt;think&lt;/em&gt; they understand it better than they
actually do.&lt;/p&gt;
&lt;h5&gt;Eternal September&lt;/h5&gt;
&lt;p&gt;Eternal September is a phrase from the early Usenet days when seasoned users
were frustrated by and disdainful of the influx of new students on the internet
for the first time each september when they started college and gained their
first access.&lt;/p&gt;
&lt;p&gt;The eternal part refers to internet access becoming more common in general,
resulting in a constant stream of &#39;regular&#39; people all the time (instead of just
students and just once a year), diluting the Usenet culture so severely it
effectively killed it.&lt;/p&gt;
&lt;p&gt;This is a common idea for any early adopters as the thing they like or even
helped pioneer becomes mainstream and loses its value as an identity or
in-group, ie, &amp;quot;I liked that band before it was cool&amp;quot;.&lt;/p&gt;
&lt;h5&gt;Cargo Cult&lt;/h5&gt;
&lt;p&gt;A cargo cult means a group of people doing things just because they see other,
more successful, people doing it without understanding the why. This often comes
up in startups when someone says one of the mega companies does something a
certain way and thinks that will apply to their own company, which likely has
vastly different goals, scale, and resources. This is similar to criticisizing
something as being like a child playing dress up in adult clothing.&lt;/p&gt;
&lt;p&gt;The phrase itself refers to the island religions that try to recreate ships,
airfields, and even planes they saw from other cultures (often allied forces
during world war two) out of grasses or wood in the attempt to get them to
return with &#39;cargo&#39; like when they first saw them.&lt;/p&gt;
&lt;p&gt;Calling something a cargo cult is brutally critical and wildly insensitive,
essentially attacking an idea as blindly following a misguided religion that
doesn&#39;t actually understand any of the real things that are happening.&lt;/p&gt;
&lt;h5&gt;Bike Shedding&lt;/h5&gt;
&lt;p&gt;Bike shedding is a strongly disdainful term suggesting that someone is arguing
about minutia that doesn&#39;t matter, possibly because they don&#39;t have the
expertise to argue about anything actually important but they still insist on
injecting an opinion on something.&lt;/p&gt;
&lt;p&gt;The phrase comes from an allegory about a team building a nuclear reactor and
while the experts discuss the design of the reactor itself, management happily
nods and smiles but when they see the design for the bike shed they argue
strongly and vehemently about which color it should be painted.&lt;/p&gt;
&lt;h5&gt;Shibboleth&lt;/h5&gt;
&lt;p&gt;Shibboleths are particular actions or processes that are more ritualistic than
practical and serve as ways to demonstrate in-grouping. This can be anything and
includes things like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;nerdy t-shirts you need to know the reference for in order to understand&lt;/li&gt;
&lt;li&gt;SCRUM&lt;/li&gt;
&lt;li&gt;standup meetings&lt;/li&gt;
&lt;li&gt;OKRs&lt;/li&gt;
&lt;li&gt;business speak like &#39;circle back&#39; and &#39;take something offline&#39;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Mythical Man Month&lt;/h5&gt;
&lt;p&gt;The Mythical Man Month is an extremely famous book about the software
engineering business that, despite being written in the 70s, still applies to an
embarrassing amount of the industry today. The title phrase refers to the idea
that business leaders often incorrectly treat software work (and people in
general) like fungible cogs in a machine that can be swapped out or added to
with predictable results, despite the mountains of evidence and experience
clearly demonstrating otherwise.&lt;/p&gt;
&lt;p&gt;Referring to the mythical man month usually means someone is suggesting
something that doesn&#39;t reflect the reality of how software engineering works
like comparing two projects against each other, making up arbitrary deadlines,
or assuming that adding people to a late project will make it go faster.&lt;/p&gt;
&lt;p&gt;A similar, if more narrow, phrase is &amp;quot;You can&#39;t produce a baby in one month by
getting nine women pregnant.&amp;quot;&lt;/p&gt;
&lt;h5&gt;The beatings will continue until morale improves&lt;/h5&gt;
&lt;p&gt;This is a sarcastic, cynical remark usually criticizing leadership completely
misunderstanding the incentives and disincentives their policies produce, either
through ignorance or just plain stupidity. The phrase mimics a nonsensical
policy designed to get some positive result (like higher morale) through some
process that will definitely reduce that result (eg, beatings).&lt;/p&gt;
&lt;p&gt;This phrase comes in many shapes and is often changed to fit the particular
situation (like &amp;quot;the layoffs will continue until morale improves&amp;quot;).&lt;/p&gt;
&lt;p&gt;Interestingly, this originated from &lt;a href=&quot;https://quoteinvestigator.com/2020/07/15/morale/&quot;&gt;at least as early as the
1960s&lt;/a&gt;, perhaps
first from a military cartoon mocking the idea that punishing people for bad
morale will fix the morale problem.&lt;/p&gt;
&lt;hr /&gt;
&lt;h4&gt;Phrases About the Work&lt;/h4&gt;
&lt;h5&gt;Rubber Duck Debugging&lt;/h5&gt;
&lt;p&gt;Rubber duck debugging is the idea that when you are stuck on a problem you can
often solve it or at least make progress by simply having to explain it, even if
you aren&#39;t explaining it to an actual person.&lt;/p&gt;
&lt;h5&gt;Technical Debt&lt;/h5&gt;
&lt;p&gt;Technical debt is a complicated term that deserves an entire post of its own.&lt;/p&gt;
&lt;p&gt;Originally coined to mean that you can get leverage from prototype code like
taking out a loan -- make a prototype (take on the debt), learn from it quickly,
then throw it away (pay off the debt with a bit of interest) and build a better
product than if you had just tried to build the final product on the first try
(similar to the agile approach to software development, which has also been
horribly corrupted in meaning until it is now unrecognizable).&lt;/p&gt;
&lt;p&gt;However, the phrase &amp;quot;technical debt&amp;quot; is almost never used this way anymore and
has instead come to mean any sort of code a person doesn&#39;t like or that slows
them down.&lt;/p&gt;
&lt;h5&gt;Yak Shaving&lt;/h5&gt;
&lt;p&gt;Yak shaving is when you want to do a task but discover that you need to do a
prerequisite first, and then another, and so on. Often by the end of the stack
you are working on something that doesn&#39;t seem at all related to your original
task.&lt;/p&gt;
&lt;p&gt;Tim Clark &lt;a href=&quot;https://betweenthepa.ws/p/on-yak-shaving-and-a-well-lived-life&quot;&gt;writes a fun example&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;I want to mow my lawn. But my lawnmower is out of gas. I&#39;ll need to go buy
some gas. But I don&#39;t have a gas can because I lent it to my neighbor. But my
neighbor is on vacation and he has a code on his garage door where my gas can
is. I could call him but I don&#39;t know his cell number. But his dad owns a yak
farm down the street and I bet he has the number.&amp;quot; But when you get to the yak
farmer, he tells you that he left his phone at the house, and he has to finish
harvesting the wool off of a couple more yaks before he can get it for you.
That is how, on some Saturday morning, when you are asked why you are standing
in the middle of a field, shaving a yak, you can truthfully answer, &amp;quot;because I
need to mow my lawn.&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This supposedly came from a Rocko&#39;s Modern Life episode where they celebrate a
holiday called &#39;yak shaving day&#39;, but this explanation doesn&#39;t make much sense
since the cartoon holiday doesn&#39;t have the characteristic stack of seemingly
unrelated tasks.&lt;/p&gt;
&lt;p&gt;This clip highlights the phenomenon (although some of the tasks are simply
distractions instead of blockers):&lt;/p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/AbSehcT19u0?si=-8Hcb36BMtD6odOm&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;h5&gt;Uncanny Valley&lt;/h5&gt;
&lt;p&gt;The &#39;uncanny valley&#39; originally referred to robot design and the uncomfortable
middle ground if you&#39;re not either clearly a robot or clearly a human.
Similarly, you can feel this with any not-quite-good-enough special effects
in a movie where if it isn&#39;t completely convincing it would have been better to
just leave it out.&lt;/p&gt;
&lt;p&gt;The term can be used for anything now where there are two extremes that both
work but being in the middle and partially doing both at the same time is worse
than either option, which often comes up in conversations about strategy and
process as much as visual design and effects.&lt;/p&gt;
&lt;h5&gt;Edge Case and Corner Case&lt;/h5&gt;
&lt;p&gt;Edge cases refer to potentially overlooked places where rules may not work
anymore, like how dividing by something is fine except when that thing is equal
to zero. In software development, the phrase edge case has come to mean an
unexpected or unusual situation that breaks something that normally works, like
handling negative numbers, accounting for leap days, the Y2K situation, &lt;a href=&quot;https://xkcd.com/327/&quot;&gt;SQL
injection&lt;/a&gt;, or &lt;a href=&quot;https://www.wired.com/2015/11/null/&quot;&gt;people named
null&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Similarly, the phrase &#39;corner case&#39; is sometimes used to describe the point
where two edge cases meet.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Startups are Weird&lt;/h3&gt;
&lt;p&gt;So there you go; twenty two words and phrases that get thrown around in tech
startups, usually as a shorthand way to criticize something. Maybe you&#39;ve heard
these before and didn&#39;t know them all or maybe you&#39;re one of the people throwing
them around but either way I hope this list was helpful, or at least
entertaining. If you&#39;re in a startup or considering joining one you are now
slightly better prepared for some of the (intentionally?) opaque,
metaphor-heavy shorthand that is so common during the day to day grind.&lt;/p&gt;
&lt;p&gt;For more details on any particular phrase it can be fun to use algolia&#39;s hacker
news search and see how something is used in practice. As an example, &lt;a href=&quot;https://hn.algolia.com/?dateRange=all&amp;amp;page=0&amp;amp;prefix=true&amp;amp;query=rubber%20duck%7Crubber%20ducking&amp;amp;sort=byDate&amp;amp;type=comment&quot;&gt;here is
a search about rubber duck
debugging&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Estimates are Guesses</title>
    <link href="https://collingreen.com/blog/estimates-are-guesses/"/>
    <updated>2024-03-04T22:33:59Z</updated>
    <id>https://collingreen.com/blog/estimates-are-guesses/</id>
    <content type="html">&lt;p&gt;Estimating when a project will be completed is wishful thinking at best and hostile politicking at worst. Why is this process still the norm in the modern workplace?&lt;/p&gt;
&lt;h3&gt;Wishful Thinking&lt;/h3&gt;
&lt;p&gt;Everyone knows why having accurate project estimates would be valuable to a business; knowing when something will be done is like a crystal ball that would let the rest of the company run more smoothly in many different ways. Promises could be made to customers, teams could be perfectly balanced, performance could be objectively measured, and marketing could be scaled up just in time. Everything would be easier, faster, safer, and more efficient.&lt;/p&gt;
&lt;p&gt;Unfortunately, this is all built on a fantasy that estimates are at least moderately accurate. Real work is messy in countless ways and even good-faith, well-informed, carefully-considered estimates tend to go wrong and when they do they can be wrong by incredible margins, often even by orders of magnitude.&lt;/p&gt;
&lt;p&gt;Moreover, the act of giving estimates can often have an extremely negative effect on teams, especially dysfunctional ones that can’t fall back on a history of respect and trust.&lt;/p&gt;
&lt;h3&gt;Why are estimates so inaccurate?&lt;/h3&gt;
&lt;p&gt;Regularly being able to provide accurate estimates requires a huge amount of effort and discipline across an entire company plus the right kind of product at the right stage of its life. Almost no business is actually willing to shoulder this cost and the ones that do tend to work on things like satellites and fighter jets where the cost of long development cycles almost doesn’t matter compared to the cost of mistakes (and these also tend to overrun their estimates and budgets).&lt;/p&gt;
&lt;p&gt;The reality of day-to-day work for the average software business, however, often makes an environment where accurate estimates aren’t even realistic.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Creative work is extremely difficult to reduce to simple numbers, especially across multiple different creative people over time. It has very little in common with assembly-line style factory work where estimates can actually work.&lt;/li&gt;
&lt;li&gt;The reality in many disciplines is that you’ve never done the exact thing you’re estimating before, meaning there is always a level of uncertainty. This is especially true in software development since you’d simply use the existing code if you had written it already.&lt;/li&gt;
&lt;li&gt;There is zero upside for being accurate when giving an estimate but there is often a downside for being wrong.&lt;/li&gt;
&lt;li&gt;It is incredibly rare to get everything right on the first try - this includes the idea, the validation, the spec, the project plan, the tests, the implementation, the rollout, and everything else. Every little misstep &lt;a href=&quot;https://en.wikipedia.org/wiki/Propagation_of_uncertainty&quot;&gt;has a compounding effect&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;There are too many complicating/time-wasting factors (like meetings that could have been emails) but we tend to estimate using an idealized view of how much time we will be able to commit (eg, 1 week if I was working 8 hours a day uninterrupted).&lt;/li&gt;
&lt;li&gt;Honest or optimistic estimates tend to get abused - there are too many horror stories of estimates being turned into deadlines and people getting punished for missing what was originally &#39;just a ballpark estimate&#39;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Parkinson%27s_law&quot;&gt;Parkinson&#39;s law&lt;/a&gt; (work expands to fill the time allotted) and its real-life cousin &amp;quot;there is an unending stream of &#39;little&#39; requests for maker time and makers rarely say &#39;no&#39; until it starts to impact a deadline&amp;quot;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Why do we keep doing it?&lt;/h3&gt;
&lt;p&gt;Even after watching estimates be inaccurate over and over again most companies still insist on it (and don’t even try to address the issues above). Having something concrete, even if it might be wildly wrong, makes people feel like they understand more of what is happening, especially for work they don’t know how to do themselves.&lt;/p&gt;
&lt;p&gt;If you assume good intentions from everyone involved then estimates, even rough and dangerously inaccurate ones, can at least provide something to use for making tradeoff decisions and a bit of structure that others can plan around.&lt;/p&gt;
&lt;p&gt;On the darker side, it is common to hear stories about managers asking for / insisting on / demanding estimates, often with assurances that they are ‘just rough estimates’, then throwing them back on the estimators like deadlines when things end up inevitably taking longer. Sometimes, especially when times are tough, it can feel like your coworkers and bosses only demand estimates from you so that you can be on the hook if things go wrong instead of them.&lt;/p&gt;
&lt;p&gt;The sad truth is that many companies simply continue this process because it seems like the safe route since ‘everybody does it’. &lt;a href=&quot;https://wiki.c2.com/?NobodyEverGotFiredForBuyingMicrosoft&quot;&gt;Nobody gets fired for doing the normal thing&lt;/a&gt;, even if it doesn’t work out well, while taking an overt risk like not requiring your teams to estimate projects can put your job at risk if it doesn’t deliver spectacular results.&lt;/p&gt;
&lt;h3&gt;The problems with &amp;quot;No Estimates&amp;quot;&lt;/h3&gt;
&lt;p&gt;The &amp;quot;No Estimates&amp;quot; crowd have described the problems with estimation at great length. Allen Holub &lt;a href=&quot;https://www.youtube.com/watch?v=QVBlnCTu9Ms&quot;&gt;has a great keynote&lt;/a&gt; about why effort put into detailed estimation is almost entirely wasted, both because it doesn’t increase accuracy and because all of the time spent on it could go into working on the actual product instead.&lt;/p&gt;
&lt;p&gt;Eschewing estimates completely often seems like a dream for builders but requires an incredible culture of trust and communication in order to not be a huge thorn in the side of the rest of the business. Even then, in order for things to run smoothly, a team with no estimation process requires a very stable project to work on plus consistent, experienced makers who have a good understanding of everything that needs to change or be added. Brand new projects or brand new teams are often too volatile to generate a steady flow of the right work, which is what makes it possible for the rest of the people involved to deal with not having any estimates.&lt;/p&gt;
&lt;h3&gt;Giving project estimates can have a silver lining&lt;/h3&gt;
&lt;p&gt;Even though the quest for an accurate estimate is a futile one, there is still a lot of value that can be gained from the estimation process while avoiding the worst of the downsides. “No Estimates” can be very cool in the right environment with the right project, but it loses out on the very valuable data we actually can derive from the estimation process itself.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Having to think about when a project will be completely done requires thinking about the entire project, which can sometimes help prevent tunnel vision.&lt;/li&gt;
&lt;li&gt;Tracking estimates over time can give an approximation of progress.&lt;/li&gt;
&lt;li&gt;Estimating as a team can provide opportunities for the estimators to learn from each other, especially when discussing system design and dealing with large unknowns.&lt;/li&gt;
&lt;li&gt;Estimating on a regular schedule can lead to breaking tasks down into more detailed subtasks, which makes it easier to work.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are forced to provide estimates for a project, make sure you’re at least getting some of the above benefits along the way.&lt;/p&gt;
&lt;h3&gt;Best of both worlds?&lt;/h3&gt;
&lt;p&gt;There are a plethora of project management techniques out there that try to make estimating more accurate or less painful, but the one I’ve found to be the most helpful in my own work is a bastardized version of &lt;a href=&quot;https://en.wikipedia.org/wiki/Three-point_estimation&quot;&gt;&amp;quot;3 point estimation&amp;quot;&lt;/a&gt; specifically designed to avoid the list of bad things discussed above while maximizing the secondary benefits. By embracing the fact that estimates cannot and will not be accurate we can get rid of the toxic parts and expose the good bits underneath.&lt;/p&gt;
&lt;p&gt;The goal is to get quick, casual guesses from each team member for an absurdly optimistic date and an unreasonably pessimistic date. Making them explicitly unreasonable and calling them guesses helps take the pressure off of giving them and reduces the worry that someone will treat them like actual estimates. The team should be able to give them within a minute or two; if they can’t then your project plan isn’t clear enough and you should go work on that with the team until it is.&lt;/p&gt;
&lt;p&gt;Having both the too-early and too-late guesses also makes it easier to get useful insights than just having a single date. The guesses over time are useful on their own but looking at the difference across the team for each type of guess can highlight places that the team needs to better understand (or agree upon). Most importantly, measuring the range between the optimistic and pessimistic dates is probably the best single indicator for general project health that you can get. If the gap is shrinking faster than time is passing you’re on the right track. If it stays level, you’re failing to make progress. If it expands, you don’t have a viable project plan and need to go make serious changes immediately.&lt;/p&gt;
&lt;h3&gt;Implementing this is intentionally simple:&lt;/h3&gt;
&lt;p&gt;First of all, explain this entire plan to the team. Explain that these are guesses, that they should be made quickly and with no stress, and that they are explicitly designed so they can’t be turned into deadlines. Reassure the entire team that you know it is impossible to accurately guess when the project will ship but that by tracking these guesses over time you can get some useful insight into how the work is going and, more importantly, early warning signs if something is going wrong.&lt;/p&gt;
&lt;p&gt;Every week (or whatever cadence is right for your group) do the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Quickly go over your project and the current plan for getting it done with the people who will be actually building it (no PMs, no sales, no marketing, no middle management; builders only).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Have every builder involved (and no one else) make 2 guesses (this should only take about a minute):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An unreasonably optimistic date for when the project could theoretically ship if everything went perfectly – no mistakes, no surprises, no changes of plan, no meetings, no on call.&lt;/li&gt;
&lt;li&gt;An unreasonably pessimistic date for when the project would ship if everything went terribly along the way – specs changed, a major system was missed, a team member leaves, production constantly goes down. The only requirement here is being really confident that the real ship date, whatever that is, will be sometime before this pessimistic guess.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Track each of these guesses somewhere (I started with a spreadsheet then made a web app to spit out better graphs and to make it easier to track multiple projects over time).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Look at the estimates as a whole and use your brain; consider what each metric means and if it should be going up or down over time. When you see something off, spend the effort to figure out the cause. Think about things like the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The average difference between the optimistic and the pessimistic guess is a rough gauge for the team’s uncertainty about the plan. This should go down quickly over time.&lt;/li&gt;
&lt;li&gt;The difference between each of the optimistic guesses or the pessimistic guesses can illuminate when the team doesn’t agree on the plan. Explore this and you might find a shorter path forward but more likely you’ll find a landmine you weren’t expecting (but hopefully before it explodes).&lt;/li&gt;
&lt;li&gt;Sudden spikes in someone’s pessimistic guesses are a waving red flag that something changed - it might be in your project or completely unrelated but you should find out what you can as quickly as possible.&lt;/li&gt;
&lt;li&gt;If you make guesses every week and the pessimistic guesses always push back about a week then you’re making literally zero progress. You should consider the project severely at risk until something changes.&lt;/li&gt;
&lt;li&gt;Estimators are reluctant to move back their pessimistic guesses by much each time, even if they should. This is one of the same reasons that normal estimates are so inaccurate. There probably isn’t a way to fix this but consider changes in the pessimistic guesses with more weight than changes to the optimistic ones.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Don&#39;t ruin it!&lt;/h3&gt;
&lt;p&gt;This is not a process you can blindly follow; it requires diligence, communication, and taking the time to really think about what you’re seeing in the numbers (plus the effort of digging in to find and address the issues it reveals).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Don&#39;t succumb to the temptation of turning the guesses into real estimates you plan with. Doing this will be wrong but will also erode the trust of your team. If your boss demands an estimate then make one up that is after the pessimistic dates but don’t plan on being right.&lt;/li&gt;
&lt;li&gt;Don&#39;t suggest people change their guesses, even if you think the guesser missed something.&lt;/li&gt;
&lt;li&gt;Don&#39;t let the estimators know the other guesses before submitting their own.&lt;/li&gt;
&lt;li&gt;Don&#39;t assume the actual ship date will be before any of the pessimistic estimates; it probably won’t be.&lt;/li&gt;
&lt;li&gt;Don&#39;t push back if folks feel like they can’t even give these guesses - if these aren’t easy to make then the project needs better definition and probably a reduction in scope.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Your Mileage May Vary&lt;/h3&gt;
&lt;p&gt;Like pretty much everything in life, this works better for some teams than others. If this resonates with you and your team and you think you can get a lot of value from the steps laid out above without too much downside from not having estimates (even bad ones) then try it out! If not, figure out what problems your team really has and come up with a coherent solution for your situation instead.&lt;/p&gt;
</content>
  </entry>
</feed>
